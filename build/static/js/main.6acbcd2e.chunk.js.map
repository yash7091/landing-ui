{"version":3,"sources":["Assets/logo.svg","Assets/cart.svg","Assets/matebook.png","Assets/big-eclipse.svg","Assets/mid-eclipse.svg","Assets/small-eclipse.svg","Navbar.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","src","logo","alt","href","Cart","Main","Mac","class","Bigcircle","MidCircle","SmallCircle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,+LCwB5BC,MArBf,WACI,OACI,4BAAQC,UAAU,UACd,yBAAKA,UAAU,kBACX,yBAAKC,IAAKC,IAAMC,IAAI,KACpB,wBAAIH,UAAU,QAAd,WAEJ,6BACI,wBAAIA,UAAU,aACV,4BAAK,uBAAGI,KAAK,IAAIJ,UAAU,YAAtB,SACL,4BAAK,uBAAGI,KAAK,IAAIJ,UAAU,YAAtB,YACL,4BAAK,uBAAGI,KAAK,IAAIJ,UAAU,YAAtB,cAGb,yBAAKA,UAAU,QACX,yBAAKC,IAAKI,IAAMF,IAAI,Q,gECgBrBG,MA7Bf,WACI,OACI,yBAAKN,UAAU,QACX,6BAASA,UAAU,gBACf,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,cACX,iDACA,yGAKJ,yBAAKA,UAAU,OACV,4BAAQA,UAAU,cAAlB,WACA,4BAAQA,UAAU,WAAlB,iBAGT,yBAAKA,UAAU,SACX,yBAAKC,IAAKM,QAId,yBAAKC,MAAM,aAAaP,IAAKQ,MAC7B,yBAAKD,MAAM,gBAAgBP,IAAKS,MAChC,yBAAMF,MAAM,eAAeP,IAAKU,QChBjCC,MATf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6acbcd2e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.146d6de4.svg\";","module.exports = __webpack_public_path__ + \"static/media/cart.a72969d9.svg\";","module.exports = __webpack_public_path__ + \"static/media/matebook.88a602a5.png\";","module.exports = __webpack_public_path__ + \"static/media/big-eclipse.ecb2be24.svg\";","module.exports = __webpack_public_path__ + \"static/media/mid-eclipse.9aae08a9.svg\";","module.exports = __webpack_public_path__ + \"static/media/small-eclipse.d769658e.svg\";","import React from 'react'\r\nimport logo from './Assets/logo.svg'\r\nimport Cart from './Assets/cart.svg'\r\nfunction Navbar() {\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"Logo-container\">\r\n                <img src={logo} alt=\"\"/>\r\n                <h4 className=\"logo\">Renezo</h4>\r\n            </div>\r\n            <nav>\r\n                <ul className=\"nav-links\">\r\n                    <li ><a href=\"#\" className=\"nav-link\">Spec</a></li>\r\n                    <li ><a href=\"#\" className=\"nav-link\">Product</a></li>\r\n                    <li ><a href=\"#\" className=\"nav-link\">Contact</a></li>\r\n                </ul>\r\n            </nav>  \r\n            <div className=\"cart\">\r\n                <img src={Cart} alt=\"\"/>\r\n            </div>          \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport Mac from './Assets/matebook.png'\r\nimport Bigcircle from './Assets/big-eclipse.svg'\r\nimport MidCircle from './Assets/mid-eclipse.svg'\r\nimport SmallCircle from './Assets/small-eclipse.svg'\r\nfunction Main() {\r\n    return (\r\n        <div className=\"main\">\r\n            <section className=\"presentation\">\r\n                <div className=\"introduction\">\r\n                    <div className=\"intro-text\">\r\n                        <h1>Laptop for future</h1>\r\n                        <p>\r\n                            The new 14 inch bezeless  display offeringa 4k\r\n                            display with touch sreen .\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"cta\">\r\n                         <button className=\"cta-select\">14 Inch</button>\r\n                         <button className=\"cta-add\">Add to Cart</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"cover\">\r\n                    <img src={Mac}/>\r\n                </div>\r\n\r\n            </section>\r\n                <img class=\"big-circle\" src={Bigcircle}/>\r\n                <img class=\"medium-circle\" src={MidCircle}/>\r\n                <img  class=\"small-circle\" src={SmallCircle}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Navbar'\nimport Main from './Main'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}